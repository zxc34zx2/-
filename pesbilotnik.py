import asyncio
import logging
from datetime import datetime
import sqlite3
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class DroneAlertBot:
    def __init__(self, token: str):
        self.token = token
        self.db_path = "drone_alerts.db"
        self.init_database()
        
        # –õ–æ–∫–∞—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ
        self.monitoring_locations = [
            "–ö–∞–∑–∞–Ω—å", "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã", "–ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫", "–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫", 
            "–ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫", "–ë—É–≥—É–ª—å–º–∞", "–ï–ª–∞–±—É–≥–∞", "–õ–µ–Ω–∏–Ω–æ–≥–æ—Ä—Å–∫", "–ß–∏—Å—Ç–æ–ø–æ–ª—å"
        ]
        
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS subscribers (
                user_id INTEGER PRIMARY KEY,
                chat_id INTEGER,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS alert_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                alert_type TEXT,
                location TEXT,
                description TEXT,
                severity TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()

    async def add_subscriber(self, user_id: int, chat_id: int, username: str, 
                           first_name: str, last_name: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO subscribers 
            (user_id, chat_id, username, first_name, last_name, is_active)
            VALUES (?, ?, ?, ?, ?, TRUE)
        ''', (user_id, chat_id, username, first_name, last_name))
        conn.commit()
        conn.close()

    async def remove_subscriber(self, user_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('UPDATE subscribers SET is_active = FALSE WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()

    async def get_active_subscribers(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT chat_id FROM subscribers WHERE is_active = TRUE')
        subscribers = [row[0] for row in cursor.fetchall()]
        conn.close()
        return subscribers

    async def save_alert(self, alert_type: str, location: str, description: str, severity: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO alert_history (alert_type, location, description, severity)
            VALUES (?, ?, ?, ?)
        ''', (alert_type, location, description, severity))
        conn.commit()
        conn.close()

    def get_severity_emoji(self, severity: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ emoji –¥–ª—è —É—Ä–æ–≤–Ω—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        emoji_map = {
            "critical": "üö®",
            "high": "‚ö†Ô∏è", 
            "medium": "üî∂",
            "low": "üí°"
        }
        return emoji_map.get(severity.lower(), "üì¢")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        await self.add_subscriber(
            user.id, 
            update.effective_chat.id,
            user.username or "", 
            user.first_name or "",
            user.last_name or ""
        )
        
        welcome_text = """
üö® *–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –†–µ—Å–ø—É–±–ª–∏–∫–µ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω*

–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω—ã—Ö –ª–µ—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–ø–ø–∞—Ä–∞—Ç–∞—Ö.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/alerts - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/help - –ü–æ–º–æ—â—å

*–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*
‚Ä¢ üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å
‚Ä¢ ‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å  
‚Ä¢ üî∂ –°—Ä–µ–¥–Ω—è—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å
‚Ä¢ üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ë—É–¥—å—Ç–µ –±–¥–∏—Ç–µ–ª—å–Ω—ã –∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
CEO: @Lekroqq
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        user = update.effective_user
        await self.remove_subscriber(user.id)
        
        stop_text = """
‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start

–ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è!
        """
        await update.message.reply_text(stop_text, parse_mode='Markdown')

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        subscribers = await self.get_active_subscribers()
        
        status_text = f"""
üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è*

‚Ä¢ ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
‚Ä¢ üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}
‚Ä¢ üü¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
‚Ä¢ üìç –†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω

*–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        await update.message.reply_text(status_text, parse_mode='Markdown')

    async def alerts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /alerts - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT alert_type, location, description, severity, created_at 
            FROM alert_history 
            ORDER BY created_at DESC 
            LIMIT 5
        ''')
        alerts = cursor.fetchall()
        conn.close()
        
        if not alerts:
            await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        alerts_text = "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n\n"
        for alert in alerts:
            alert_type, location, description, severity, created_at = alert
            emoji = self.get_severity_emoji(severity)
            alerts_text += f"{emoji} *{alert_type}* ({severity})\n"
            alerts_text += f"üìç *–ú–µ—Å—Ç–æ:* {location}\n"
            alerts_text += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
            alerts_text += f"üïí *–í—Ä–µ–º—è:* {created_at}\n\n"
        
        await update.message.reply_text(alerts_text, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò *–ü–æ–º–æ—â—å –ø–æ —Å–∏—Å—Ç–µ–º–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è*

*–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*
/start - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π  
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/alerts - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
1. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ—Å–ª–µ–¥—É–π—Ç–µ –≤ —É–∫—Ä—ã—Ç–∏–µ
2. –°–æ–æ–±—â–∏—Ç–µ –æ–∫—Ä—É–∂–∞—é—â–∏–º –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –º–µ—Å—Ç–Ω—ã—Ö –≤–ª–∞—Å—Ç–µ–π
4. –ù–µ –ø—Ä–∏–±–ª–∏–∂–∞–π—Ç–µ—Å—å –∫ –º–µ—Å—Ç—É –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è

*–ö–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±:*
112 - –ï–¥–∏–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±
117 - –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∏–Ω–æ–±–æ—Ä–æ–Ω—ã –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ë–ü–õ–ê

*–ó–æ–Ω—ã –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –≤ –†–¢:*
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
‚Ä¢ –ì–æ—Ä–æ–¥—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã
‚Ä¢ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def send_alert(self, alert_type: str, location: str, description: str, 
                        severity: str = "medium", context: ContextTypes.DEFAULT_TYPE = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        subscribers = await self.get_active_subscribers()
        
        if not subscribers:
            logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        emoji = self.get_severity_emoji(severity)
        
        alert_message = f"""
{emoji} *–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ë–ï–°–ü–ò–õ–û–¢–ù–û–ô –û–ü–ê–°–ù–û–°–¢–ò* {emoji}

*–¢–∏–ø:* {alert_type}
*–£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:* {severity.upper()}
*–ú–µ—Å—Ç–æ:* {location}
*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ—Å–ª–µ–¥—É–π—Ç–µ –≤ —É–∫—Ä—ã—Ç–∏–µ
‚Ä¢ –°–æ–æ–±—â–∏—Ç–µ –æ–∫—Ä—É–∂–∞—é—â–∏–º –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –º–µ—Å—Ç–Ω—ã—Ö –≤–ª–∞—Å—Ç–µ–π

*–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:* {datetime.now().strftime('%d.%m.%Y %H:%M')}
üìç –†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        await self.save_alert(alert_type, location, description, severity)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        successful_sends = 0
        
        for chat_id in subscribers:
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=alert_message,
                    parse_mode='Markdown'
                )
                successful_sends += 1
                await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {chat_id}: {e}")
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful_sends} –∏–∑ {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")

    async def test_alert_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        location = random.choice(self.monitoring_locations)
        alert_types = [
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞",
            "–ù–∞—Ä—É—à–µ–Ω–∏–µ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞", 
            "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É–≥—Ä–æ–∑–∞ –ë–ü–õ–ê"
        ]
        
        await self.send_alert(
            alert_type="–¢–ï–°–¢: " + random.choice(alert_types),
            location=location,
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            severity="low",
            context=context
        )
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")

    async def simulate_random_alert(self, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        subscribers = await self.get_active_subscribers()
        
        if not subscribers:
            return
            
        # 10% —à–∞–Ω—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
        if random.random() < 0.1:
            location = random.choice(self.monitoring_locations)
            alert_types = [
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞",
                "–ù–∞—Ä—É—à–µ–Ω–∏–µ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞", 
                "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É–≥—Ä–æ–∑–∞ –ë–ü–õ–ê",
                "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–µ—Å–ø–∏–ª–æ—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"
            ]
            severity_levels = ["medium", "high"]
            
            await self.send_alert(
                alert_type=random.choice(alert_types),
                location=location,
                description=f"–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–µ—Å–ø–∏–ª–æ—Ç–Ω—ã—Ö –ª–µ—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–ø–ø–∞—Ä–∞—Ç–æ–≤ –≤ —Ä–∞–π–æ–Ω–µ {location}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–±–ª—é–¥–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å.",
                severity=random.choice(severity_levels),
                context=context
            )

    async def periodic_check(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        await self.simulate_random_alert(context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –¢–û–ö–ï–ù –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –¢–û–ö–ï–ù ‚ö†Ô∏è
    BOT_TOKEN = "8200731966:AAFmXTfvQd_PIrkiXv3YA8LS1LEqsud4dlc"  # <-- –í–°–¢–ê–í–¨–¢–ï –í–ê–® –¢–û–ö–ï–ù –ó–î–ï–°–¨
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–ª—Å—è –ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
    if "YOUR_BOT_TOKEN_HERE" in BOT_TOKEN or len(BOT_TOKEN) < 10:
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print(f"–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: {BOT_TOKEN}")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = DroneAlertBot(BOT_TOKEN)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", bot.start_command))
        application.add_handler(CommandHandler("stop", bot.stop_command))
        application.add_handler(CommandHandler("status", bot.status_command))
        application.add_handler(CommandHandler("alerts", bot.alerts_command))
        application.add_handler(CommandHandler("help", bot.help_command))
        application.add_handler(CommandHandler("test_alert", bot.test_alert_command))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        job_queue = application.job_queue
        if job_queue:
            job_queue.run_repeating(bot.periodic_check, interval=300, first=10)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("üìç –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –†–µ—Å–ø—É–±–ª–∏–∫–µ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω")
        print("üìä –ö–æ–º–∞–Ω–¥—ã: /start, /stop, /status, /alerts, /help, /test_alert")
        print("üöÄ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

if __name__ == "__main__":
    main()